#! /bin/bash -
# Creates Market Survey watchlists for Interactive Brokers
#
# Usage:
# Files:
# * data/Market_Survey - symbolic link to a market survey file for the current month. It references which sector each stock belongs to. How to creat it:
# Save MARKET_SURVEY.csv from the spreadsheet format into csv. USE column (":") as field separator, not comma (",")! Create symbolic link Market_Survey to the .csv file.
# * assets/scripts/rankings/data/y_universe/SPYprcnt-1d/report_${DATE_REPORT} - stock report
# * assets/scripts/rankings/data/sectors/SELFprcnt-5d/report_${DATE_REPORT} - sector report
# run:
# CALC_METHOD=SPYprcnt-1d
# DATE_REPORT=2021-08-02
# ./watchlist2 [$CALC_METHOD $DATE_REPORT]

# if no respective vars are exported to the script, set to supplied args, and if args are not supplied, set default calc method and today's date
if [ ! -v CALC_METHOD ] ; then CALC_METHOD=${1:-"SPYprcnt-1d"} ; fi
if [ ! -v DATE_REPORT ] ; then DATE_REPORT=${2:-$(date +%Y-%m-%d)} ; fi

project_root=/var/www/html/tradehelperonline

market_survey=$(find $project_root -name Market_Survey)
if [ ! -f $market_survey ] ; then 
  echo "Could not find file '$market_survey'"
  exit 1
fi
stock_report=$(find ${project_root}/assets/scripts/rankings/data/y_universe/${CALC_METHOD} -name report_${DATE_REPORT})
if [ ! -f $stock_report ] ; then
  echo "Could not find stock report in '$stock_report'"
  exit 1
fi
sector_report=$(find ${project_root}/assets/scripts/rankings/data/sectors/SELFprcnt-5d -name report_${DATE_REPORT})
if [ ! -f $sector_report ] ; then
  echo "Could not find sector report in '$sector_report'"
  exit 1
fi



exit
# Get only the lines with stock symbols and fields containing symbol and sector
# sed -n -e '/^[-A-Z]\+:/p' $market_survey | cut -d : -f 1,4 > temp

awk -f get_watchlist.awk FS=: $market_survey FS=,  


# Prepare STRENGTH section (Column 1)
# Sort on Sector and Score Fields, Positive values first
sort -t : -fnr -k 3,3 -k 4,4 -o sorted_desc.csv temp.csv
sed -n -e '1iHED,400' -e 's/^\([-A-Z]\+\):X.\{2\}:4[0-9]\{2\}:[0-9]\+/DES,\1,STK,SMART\/AMEX/p' sorted_desc.csv > 400.csv
sed -n -e '1iHED,300' -e 's/^\([-A-Z]\+\):X.\{2\}:3[0-9]\{2\}:[0-9]\+/DES,\1,STK,SMART\/AMEX/p' sorted_desc.csv > 300.csv
sed -n -e '1iHED,200' -e 's/^\([-A-Z]\+\):X.\{2\}:2[0-9]\{2\}:[0-9]\+/DES,\1,STK,SMART\/AMEX/p' sorted_desc.csv > 200.csv
sed -e '1iCOLUMN,1\nHED,STRENGTH' {400,300,200}.csv > column1.csv
rm {400,300,200}.csv

# Prepare WEAKNESS section (Column 3)
#Sort on Sector and Score Fields, Negative values first
sort -t : -fn -k 3,3 -k 4,4 -o sorted_asc.csv temp.csv
sed -n -e '1iHED,400' -e 's/^\([-A-Z]\+\):X.\{2\}:-4[0-9]\{2\}:-\?[0-9]\+/DES,\1,STK,SMART\/AMEX/p' sorted_asc.csv > 400.csv
sed -n -e '1iHED,300' -e 's/^\([-A-Z]\+\):X.\{2\}:-3[0-9]\{2\}:-\?[0-9]\+/DES,\1,STK,SMART\/AMEX/p' sorted_asc.csv > 300.csv
sed -n -e '1iHED,200' -e 's/^\([-A-Z]\+\):X.\{2\}:-2[0-9]\{2\}:-\?[0-9]\+/DES,\1,STK,SMART\/AMEX/p' sorted_asc.csv > 200.csv
sed -e '1iCOLUMN,3\nHED,WEAKNESS' {400,300,200}.csv > column3.csv
rm {400,300,200}.csv

sectors=($*)
# Prepare LEADERS section (Column 0)
for i in {0..5} ; do
  sed -n -e "1iHED,${sectors[$i]}" -e "s/^\([-A-Z]\+\):${sectors[$i]}:[432]\{1\}[0-9]\{2\}:[0-9]\+/DES,\1,STK,SMART\/AMEX/p" sorted_desc.csv > ${sectors[$i]}.csv
  if [ $( sed -n -e '$=' ${sectors[$i]}.csv ) -eq 1 ] ; then
    echo 'HED,--' >> ${sectors[$i]}.csv
  fi
done
sed -e '1iCOLUMN,0\nHED,LEADERS' $(for i in {0..5} ; do echo ${sectors[$i]}.csv ; done) > column0.csv

# Prepare LAGGERS section (Column 4)
for i in {6..11} ; do
  sed -n -e "1iHED,${sectors[$i]}" -e "s/^\([-A-Z]\+\):${sectors[$i]}:-[432]\{1\}[0-9]\{2\}:-\?[0-9]\+/DES,\1,STK,SMART\/AMEX/p" sorted_asc.csv > ${sectors[$i]}.csv
  if [ $( sed -n -e '$=' ${sectors[$i]}.csv ) -eq 1 ] ; then
    echo 'HED,--' >> ${sectors[$i]}.csv
  fi
done
sed -e '1iCOLUMN,4\nHED,LAGGERS' $(for i in {11..6} ; do echo ${sectors[$i]}.csv ; done) > column4.csv

## TODO: Prepare ACTION EXPECTED (Column2)
# ..

# Create the watchlist
rm -f watchlist.txt
cat column{0,1,3,4}.csv >> watchlist.txt

# remove files
rm $(for i in {0..11} ; do echo ${sectors[$i]}.csv ; done) sorted_asc.csv sorted_desc.csv temp.csv column{0,1,3,4}.csv

# TODO: Translate specific symbols from Yahoo representation into IB (i.e. BRK-B to BRK B)
# ...

echo 'File watchlist.txt created successfully.'
