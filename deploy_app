#! /bin/bash -
while (( "$#" > 0 )) ; do
  case $1 in
    bare)
      echo 'will perform bare install'
      if [ ! -f  .env ]; then
        cp .env.dist .env;
      fi
      echo "APP_ENV=$APP_ENV" >> .env
      echo "APP_SECRET=$(openssl rand -base64 12)" >> .env
#      echo "DATABASE_URL=\"$DATABASE_CONNECTOR\"" >> .env
      composer install
      npm install --unsafe-perm
      chown -R :${APACHE_GROUP} var/cache
      chmod -R g+w var/cache
      chmod -R g+w var/log
      chown -R :${APACHE_GROUP} public
      chmod -R g+w public/charts
      bin/console cache:clear
      ;;
    assets)
      echo 'will copy application assets from aws'
      mkdir -p /var/www/html/assets
      rclone --config=/run/secrets/datastore copy $DATA_REMOTE:$BUCKET_NAME/assets /var/www/html/assets
      bin/console cache:clear
      npm run build
      chown -R $INSTANCE_USER:$APACHE_GROUP assets
      ;;
    settings)
#      echo 'will transfer application settings'
       # rclone --config=/run/secrets/datastore copy $DATA_REMOTE:$BUCKET_NAME:config/services.yaml /var/www/html/config
      echo 'no settings to transfer'
      ;;
    data)
      echo 'will copy application data from aws'
      rclone --config=/run/secrets/datastore copy $DATA_REMOTE:$BUCKET_NAME/data/source /var/www/html/data/source
      chown -R $INSTANCE_USER:$APACHE_GROUP data
      ;;
    import-data)
      echo 'will unpack price history files, import instruments and price data'
      tar -C /var/www/html -xvf /var/www/html/data/source/ohlcv/price_history_files.tar
      bin/console th:instruments:import -v --clear-db=true
      bin/console th:price:import -v --provider=YAHOO --offset=1 --chunk-80 data/source/y_universe.csv
      bin/console th:price:import -v --provider=YAHOO --offset=81 --chunk-80 data/source/y_universe.csv
      bin/console th:price:import -v --provider=YAHOO --offset=161 --chunk-80 data/source/y_universe.csv
      bin/console th:price:import -v --provider=YAHOO --offset=241 --chunk-80 data/source/y_universe.csv
      bin/console th:price:import -v --provider=YAHOO --offset=321 --chunk-80 data/source/y_universe.csv
      bin/console th:price:import -v --provider=YAHOO --offset=401 --chunk-80 data/source/y_universe.csv
      bin/console th:price:import -v --provider=YAHOO --offset=481 data/source/y_universe.csv
      ;;
    audit-data)
      echo 'run audits on data'
      bin/console th:price:audit -v --provider=YAHOO
      ;;
    database)
      echo 'create empty database'
      bin/console doctrine:database:create
      ;;
    migrations)
      echo 'will perform migrations'
      if [ "$APP_ENV" != 'prod' ]; then
        bin/console doctrine:migrations:migrate --no-interaction
      else
        echo 'refuse to perform database migrations in prod environment'
        exit 1
      fi
      ;;
    fixtures)
      # loading of fixtures can only be done in test environment into a dedicated database
      if [ "$APP_ENV" == 'test' ]; then
#        if [ ! -f .env.test ]; then
#          echo "KERNEL_CLASS='App\Kernel'" >> .env.test
#          echo "DATABASE_URL=\"$DATABASE_CONNECTOR\"" >> .env.test
#        fi
        echo 'will clear out existing database and add fixtures'
        bin/console doctrine:fixtures:load --group=Instruments --no-interaction
        bin/console doctrine:fixtures:load --group=OHLCV1 --append --no-interaction
        bin/console doctrine:fixtures:load --group=OHLCV2 --append --no-interaction
      else
          echo 'Application is not in test environment. Deployment of fixtures will not be performed'
          exit 1
      fi
      ;;
    tests)
      if [ "$APP_ENV" == 'test' ]; then
        echo 'will run unit tests'
        bin/phpunit --testsuite 'App Services'
      else
        echo 'Application is not in test or dev environment. Testing will not be performed'
        exit 1
      fi
      ;;
    *) echo "invalid directive $1"
      ;;
  esac
  shift
done
